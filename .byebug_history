exit
collision
collision = true if (pos[0]-10..pos[0]+10).include?(x) && (pos[1]-10..pos[1]+10).include?(y)
exit
(pos[0]-10..pos[0]+10).include?(446)
(pos[0]-10..pos[0]+10).include?(446))
(pos[0]-10..pos[0]+10).include?(x)
(pos[0]-10..pos[0]+10).to_a
(pos[0]-10..pos[0]+10)
break unless (pos[0]-10..pos[0]+10).include?(x) && (pos[1]-10..pos[1]+10).include?(y)
(pos[0]-10..pos[0]+10).include?(x) && (pos[1]-10..pos[1]+10).include?(y)
(pos[1]-10..pos[1]+10).include?(y)
(pos[0]-10..pos[0]+10).include?(x)
y
x
pos
 x,y = 0,0
words.empty? ? occupied_pos = [] : words.map {|word| [word.x,word.y]} 
words.empty? ? occupied_x = [] : words.map {|word| [word.x,word.y]} 
words.map {|word| [word.x,word.y]}
words.map(&:[x,y])
words.map(&:y)
y
x
x,y = 0 , 0 
x,y = 0,0
x
y
x,y = 0
words.empty? ? occupied_x = [] : words.map(&:y) 
a.empty?
a = []
words.map(&:y)
words.map(&:word.y)
words.map {|word| [word.x, word.y]}
words
exit
words
exit
words
